/**
 * ---------------------------------------------------------------------------------
 * This file has been generated by Sanity TypeGen.
 * Command: `sanity typegen generate`
 *
 * Any modifications made directly to this file will be overwritten the next time
 * the TypeScript definitions are generated. Please make changes to the Sanity
 * schema definitions and/or GROQ queries if you need to update these types.
 *
 * For more information on how to use Sanity TypeGen, visit the official documentation:
 * https://www.sanity.io/docs/sanity-typegen
 * ---------------------------------------------------------------------------------
 */

// Source: schema.json
export type SanityImagePaletteSwatch = {
  _type: "sanity.imagePaletteSwatch";
  background?: string;
  foreground?: string;
  population?: number;
  title?: string;
};

export type SanityImagePalette = {
  _type: "sanity.imagePalette";
  darkMuted?: SanityImagePaletteSwatch;
  lightVibrant?: SanityImagePaletteSwatch;
  darkVibrant?: SanityImagePaletteSwatch;
  vibrant?: SanityImagePaletteSwatch;
  dominant?: SanityImagePaletteSwatch;
  lightMuted?: SanityImagePaletteSwatch;
  muted?: SanityImagePaletteSwatch;
};

export type SanityImageDimensions = {
  _type: "sanity.imageDimensions";
  height?: number;
  width?: number;
  aspectRatio?: number;
};

export type Geopoint = {
  _type: "geopoint";
  lat?: number;
  lng?: number;
  alt?: number;
};

export type Tech = {
  _id: string;
  _type: "tech";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  title?: string;
  icon?: {
    asset?: {
      _ref: string;
      _type: "reference";
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
    };
    hotspot?: SanityImageHotspot;
    crop?: SanityImageCrop;
    _type: "image";
  };
  hidden?: boolean;
};

export type Service = {
  _id: string;
  _type: "service";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  title?: string;
  description?: string;
  icon?: {
    asset?: {
      _ref: string;
      _type: "reference";
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
    };
    hotspot?: SanityImageHotspot;
    crop?: SanityImageCrop;
    _type: "image";
  };
};

export type Project = {
  _id: string;
  _type: "project";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  name?: string;
  tagline?: string;
  status?: string;
  description?: Array<{
    children?: Array<{
      marks?: Array<string>;
      text?: string;
      _type: "span";
      _key: string;
    }>;
    style?: "normal" | "h1" | "h2" | "h3" | "h4" | "h5" | "h6" | "blockquote";
    listItem?: "bullet" | "number";
    markDefs?: Array<{
      href?: string;
      _type: "link";
      _key: string;
    }>;
    level?: number;
    _type: "block";
    _key: string;
  }>;
  slug?: Slug;
  liveURL?: string;
  githubURL?: string;
  logoImage?: {
    asset?: {
      _ref: string;
      _type: "reference";
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
    };
    hotspot?: SanityImageHotspot;
    crop?: SanityImageCrop;
    _type: "image";
  };
  isFeatured?: boolean;
  screenshots?: Array<{
    asset?: {
      _ref: string;
      _type: "reference";
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
    };
    hotspot?: SanityImageHotspot;
    crop?: SanityImageCrop;
    _type: "image";
    _key: string;
  }>;
  developedAt?: string;
  tags?: Array<string>;
  stack?: Array<{
    _ref: string;
    _type: "reference";
    _weak?: boolean;
    _key: string;
    [internalGroqTypeReferenceTo]?: "tech";
  }>;
  languages?: Array<{
    language?: string;
    percent?: number;
    _key: string;
  }>;
};

export type Slug = {
  _type: "slug";
  current?: string;
  source?: string;
};

export type Profile = {
  _id: string;
  _type: "profile";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  name?: string;
  bio?: string;
  about?: Array<{
    children?: Array<{
      marks?: Array<string>;
      text?: string;
      _type: "span";
      _key: string;
    }>;
    style?: "normal" | "h1" | "h2" | "h3" | "h4" | "h5" | "h6" | "blockquote";
    listItem?: "bullet" | "number";
    markDefs?: Array<{
      href?: string;
      _type: "link";
      _key: string;
    }>;
    level?: number;
    _type: "block";
    _key: string;
  }>;
  photo?: {
    asset?: {
      _ref: string;
      _type: "reference";
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
    };
    hotspot?: SanityImageHotspot;
    crop?: SanityImageCrop;
    alt?: string;
    label?: string;
    _type: "image";
  };
  resumeURL?: {
    asset?: {
      _ref: string;
      _type: "reference";
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: "sanity.fileAsset";
    };
    _type: "file";
  };
  location?: string;
  socials?: {
    email?: string;
    github?: string;
    linkedin?: string;
    blog?: string;
    whatsapp?: string;
    bluesky?: string;
    twitter?: string;
  };
  metrics?: {
    apps?: number;
    websites?: number;
    users?: number;
    years?: number;
  };
};

export type SanityFileAsset = {
  _id: string;
  _type: "sanity.fileAsset";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  originalFilename?: string;
  label?: string;
  title?: string;
  description?: string;
  altText?: string;
  sha1hash?: string;
  extension?: string;
  mimeType?: string;
  size?: number;
  assetId?: string;
  uploadId?: string;
  path?: string;
  url?: string;
  source?: SanityAssetSourceData;
};

export type SanityImageCrop = {
  _type: "sanity.imageCrop";
  top?: number;
  bottom?: number;
  left?: number;
  right?: number;
};

export type SanityImageHotspot = {
  _type: "sanity.imageHotspot";
  x?: number;
  y?: number;
  height?: number;
  width?: number;
};

export type SanityImageAsset = {
  _id: string;
  _type: "sanity.imageAsset";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  originalFilename?: string;
  label?: string;
  title?: string;
  description?: string;
  altText?: string;
  sha1hash?: string;
  extension?: string;
  mimeType?: string;
  size?: number;
  assetId?: string;
  uploadId?: string;
  path?: string;
  url?: string;
  metadata?: SanityImageMetadata;
  source?: SanityAssetSourceData;
};

export type SanityAssetSourceData = {
  _type: "sanity.assetSourceData";
  name?: string;
  id?: string;
  url?: string;
};

export type SanityImageMetadata = {
  _type: "sanity.imageMetadata";
  location?: Geopoint;
  dimensions?: SanityImageDimensions;
  palette?: SanityImagePalette;
  lqip?: string;
  blurHash?: string;
  hasAlpha?: boolean;
  isOpaque?: boolean;
};

export type Markdown = string;

export type AllSanitySchemaTypes =
  | SanityImagePaletteSwatch
  | SanityImagePalette
  | SanityImageDimensions
  | Geopoint
  | Tech
  | Service
  | Project
  | Slug
  | Profile
  | SanityFileAsset
  | SanityImageCrop
  | SanityImageHotspot
  | SanityImageAsset
  | SanityAssetSourceData
  | SanityImageMetadata
  | Markdown;
export declare const internalGroqTypeReferenceTo: unique symbol;
// Source: ./sanity/lib/query.ts
// Variable: profileQuery
// Query: *[ _type == "profile" ]{      _id,      _updatedAt,      name,      bio,      about,      location,      "resumeURL": resumeURL.asset->url,      "photo": {"url": photo.asset->url, "alt": photo.alt, "label": photo.label},      lastUpdated,      socials {github, email, linkedin, whatsapp, bluesky, blog},      metrics {apps, websites, users, years},    }[0]
export type ProfileQueryResult = {
  _id: string;
  _updatedAt: string;
  name: string | null;
  bio: string | null;
  about: Array<{
    children?: Array<{
      marks?: Array<string>;
      text?: string;
      _type: "span";
      _key: string;
    }>;
    style?: "blockquote" | "h1" | "h2" | "h3" | "h4" | "h5" | "h6" | "normal";
    listItem?: "bullet" | "number";
    markDefs?: Array<{
      href?: string;
      _type: "link";
      _key: string;
    }>;
    level?: number;
    _type: "block";
    _key: string;
  }> | null;
  location: string | null;
  resumeURL: string | null;
  photo: {
    url: string | null;
    alt: string | null;
    label: string | null;
  };
  lastUpdated: null;
  socials: {
    github: string | null;
    email: string | null;
    linkedin: string | null;
    whatsapp: string | null;
    bluesky: string | null;
    blog: string | null;
  } | null;
  metrics: {
    apps: number | null;
    websites: number | null;
    users: number | null;
    years: number | null;
  } | null;
} | null;
// Variable: projectsQuery
// Query: *[ _type == "project" ] | order(developedAt desc){      _id,      name,      tagline,      isFeatured,      "slug": slug.current,      tags,      languages[],      status,      stack,      githubURL,      liveURL,      "logoImage": {"url": logoImage.asset->url, "alt": logoImage.alt},      "screenshots": screenshots[]{        "url": asset->url,      },      developedAt    }
export type ProjectsQueryResult = Array<{
  _id: string;
  name: string | null;
  tagline: string | null;
  isFeatured: boolean | null;
  slug: string | null;
  tags: Array<string> | null;
  languages: Array<{
    language?: string;
    percent?: number;
    _key: string;
  }> | null;
  status: string | null;
  stack: Array<{
    _ref: string;
    _type: "reference";
    _weak?: boolean;
    _key: string;
    [internalGroqTypeReferenceTo]?: "tech";
  }> | null;
  githubURL: string | null;
  liveURL: string | null;
  logoImage: {
    url: string | null;
    alt: null;
  };
  screenshots: Array<{
    url: string | null;
  }> | null;
  developedAt: string | null;
}>;
// Variable: projectDetailQuery
// Query: *[_type == "project" && slug.current == $slug][0]{      _id,      name,      tagline,      description,      slug,      tags,      languages,      status,      githubURL,      liveURL,      developedAt,      "logoImage": {"url": logoImage.asset->url, "alt": logoImage.alt},      "screenshots": screenshots[]{        "url": asset->url,      },      stack[]-> { title, icon { asset->{url} } }    }
export type ProjectDetailQueryResult = {
  _id: string;
  name: string | null;
  tagline: string | null;
  description: Array<{
    children?: Array<{
      marks?: Array<string>;
      text?: string;
      _type: "span";
      _key: string;
    }>;
    style?: "blockquote" | "h1" | "h2" | "h3" | "h4" | "h5" | "h6" | "normal";
    listItem?: "bullet" | "number";
    markDefs?: Array<{
      href?: string;
      _type: "link";
      _key: string;
    }>;
    level?: number;
    _type: "block";
    _key: string;
  }> | null;
  slug: Slug | null;
  tags: Array<string> | null;
  languages: Array<{
    language?: string;
    percent?: number;
    _key: string;
  }> | null;
  status: string | null;
  githubURL: string | null;
  liveURL: string | null;
  developedAt: string | null;
  logoImage: {
    url: string | null;
    alt: null;
  };
  screenshots: Array<{
    url: string | null;
  }> | null;
  stack: Array<{
    title: string | null;
    icon: {
      asset: {
        url: string | null;
      } | null;
    } | null;
  }> | null;
} | null;
// Variable: servicesQuery
// Query: *[_type == "service"] | order(_createdAt asc){    _id,    title,    description,    icon { "url": asset->url, "alt": alt, "label": label }  }
export type ServicesQueryResult = Array<{
  _id: string;
  title: string | null;
  description: string | null;
  icon: {
    url: string | null;
    alt: null;
    label: null;
  } | null;
}>;
// Variable: techQuery
// Query: *[_type == "tech"] | order(_createdAt asc){    _id,    title,    hidden,    icon { "url": asset->url, "alt": alt, "label": label }  }
export type TechQueryResult = Array<{
  _id: string;
  title: string | null;
  hidden: boolean | null;
  icon: {
    url: string | null;
    alt: null;
    label: null;
  } | null;
}>;

// Query TypeMap
import "@sanity/client";
declare module "@sanity/client" {
  interface SanityQueries {
    '*[ _type == "profile" ]{\n      _id,\n      _updatedAt,\n      name,\n      bio,\n      about,\n      location,\n      "resumeURL": resumeURL.asset->url,\n      "photo": {"url": photo.asset->url, "alt": photo.alt, "label": photo.label},\n      lastUpdated,\n      socials {github, email, linkedin, whatsapp, bluesky, blog},\n      metrics {apps, websites, users, years},\n    }[0]': ProfileQueryResult;
    '*[ _type == "project" ] | order(developedAt desc){\n      _id,\n      name,\n      tagline,\n      isFeatured,\n      "slug": slug.current,\n      tags,\n      languages[],\n      status,\n      stack,\n      githubURL,\n      liveURL,\n      "logoImage": {"url": logoImage.asset->url, "alt": logoImage.alt},\n      "screenshots": screenshots[]{\n        "url": asset->url,\n      },\n      developedAt\n    }': ProjectsQueryResult;
    '*[_type == "project" && slug.current == $slug][0]{\n      _id,\n      name,\n      tagline,\n      description,\n      slug,\n      tags,\n      languages,\n      status,\n      githubURL,\n      liveURL,\n      developedAt,\n      "logoImage": {"url": logoImage.asset->url, "alt": logoImage.alt},\n      "screenshots": screenshots[]{\n        "url": asset->url,\n      },\n      stack[]-> { title, icon { asset->{url} } }\n    }': ProjectDetailQueryResult;
    '*[_type == "service"] | order(_createdAt asc){\n    _id,\n    title,\n    description,\n    icon { "url": asset->url, "alt": alt, "label": label }\n  }': ServicesQueryResult;
    '*[_type == "tech"] | order(_createdAt asc){\n    _id,\n    title,\n    hidden,\n    icon { "url": asset->url, "alt": alt, "label": label }\n  }': TechQueryResult;
  }
}
